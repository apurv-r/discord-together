{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"<!--Custom Home Page--!>","title":"Welcome"},{"location":"faq/","text":"Frequently Asked Questions Can I create my own activity? As of right now, only activities sanctioned by Discord are allowed to be used through the package. If any more activity ID's are available, the package will be updated to include them. I am receiving an error saying 'Activity Ended' when I click the invite link. This can be caused due to too many people clicking the invite link at once. Remember, only one person needs to click the invite link and others can join by clicking the 'Play' button. The package is giving out invalid invite links. If this ever happens, you can turn on debug mode by heading over to the DiscordTogether() constructor and adding a kwarg named debug=True . Once debug mode is active, the package will send you the json result that it receives from Discord API. The result will contain information for us to isolate the issue and try to fix it. v1.0.8 and above has error handlers for most of the commonly found false invite link causes. The party games / voice activities do not work on my device. As mentioned in the package description, this is still a BETA feature. As of writing this, it is only supported for updated PC versions of Discord and web versions of Discord. The party games / voice activities aren't loading. It is possible that Discord Together applications may not load sometimes. To fix this go into settings and Authorized Apps. Then remove whichever app that isn't loading, eg: Watch Together, Poker Night etc. After that fully close and reopen Discord. This should fix the issue. My invites show 'The user has been banned from this guild' whenever I make a new invite. This can happen if you have any alt accounts/bots banned from that server since Discord bans users via IP. So you would have to unban these accounts/bots to get your invites working again.","title":"Frequently Asked Questions"},{"location":"faq/#frequently-asked-questions","text":"Can I create my own activity? As of right now, only activities sanctioned by Discord are allowed to be used through the package. If any more activity ID's are available, the package will be updated to include them. I am receiving an error saying 'Activity Ended' when I click the invite link. This can be caused due to too many people clicking the invite link at once. Remember, only one person needs to click the invite link and others can join by clicking the 'Play' button. The package is giving out invalid invite links. If this ever happens, you can turn on debug mode by heading over to the DiscordTogether() constructor and adding a kwarg named debug=True . Once debug mode is active, the package will send you the json result that it receives from Discord API. The result will contain information for us to isolate the issue and try to fix it. v1.0.8 and above has error handlers for most of the commonly found false invite link causes. The party games / voice activities do not work on my device. As mentioned in the package description, this is still a BETA feature. As of writing this, it is only supported for updated PC versions of Discord and web versions of Discord. The party games / voice activities aren't loading. It is possible that Discord Together applications may not load sometimes. To fix this go into settings and Authorized Apps. Then remove whichever app that isn't loading, eg: Watch Together, Poker Night etc. After that fully close and reopen Discord. This should fix the issue. My invites show 'The user has been banned from this guild' whenever I make a new invite. This can happen if you have any alt accounts/bots banned from that server since Discord bans users via IP. So you would have to unban these accounts/bots to get your invites working again.","title":"Frequently Asked Questions"},{"location":"getting-started/","text":"Getting Started Discord Together is a python package that allows bots to create invite links to Discord's BETA feature, popularly known as VC Party Games or Voice Activities. This feature is only available by default on a small amount of hand picked servers. However, this package allows you to create invite links to such activities in your own servers! This package also has no dependencies other than aiohttp , meaning it can be used with any fork of discord.py. This project is open source, you can find the source code here . Info As of the latest release, this BETA feature is only supported on web and updated PC app versions of Discord and is not supported on mobile. Installation with pip recommended pip install discord-together This will automatically install compatible versions of aiohttp which is a dependency. If you're using any fork of discord.py, you will already be having this package. Installation Error If you receive an error like No matching distribution found for discord-together when installing , try updating the python version! (It must be 3.6 or higher) with git Discord Together can be directly used from GitHub by cloning the repository into a subfolder of your project root which might be useful if you want to use the very latest version: git clone https://github.com/apurv-r/discord-together.git","title":"Installation"},{"location":"getting-started/#getting-started","text":"Discord Together is a python package that allows bots to create invite links to Discord's BETA feature, popularly known as VC Party Games or Voice Activities. This feature is only available by default on a small amount of hand picked servers. However, this package allows you to create invite links to such activities in your own servers! This package also has no dependencies other than aiohttp , meaning it can be used with any fork of discord.py. This project is open source, you can find the source code here . Info As of the latest release, this BETA feature is only supported on web and updated PC app versions of Discord and is not supported on mobile.","title":"Getting Started"},{"location":"getting-started/#installation","text":"","title":"Installation"},{"location":"getting-started/#with-pip","text":"pip install discord-together This will automatically install compatible versions of aiohttp which is a dependency. If you're using any fork of discord.py, you will already be having this package. Installation Error If you receive an error like No matching distribution found for discord-together when installing , try updating the python version! (It must be 3.6 or higher)","title":"with pip"},{"location":"getting-started/#with-git","text":"Discord Together can be directly used from GitHub by cloning the repository into a subfolder of your project root which might be useful if you want to use the very latest version: git clone https://github.com/apurv-r/discord-together.git","title":"with git"},{"location":"setup/","text":"Steps to setup Using discord-together is quite simple. First, import the DiscordTogether constructor from discord_together import DiscordTogether Next, create a variable to store the class instance. This variable must be defined in a async function, like on_ready() @client . event async def on_ready (): client . togetherControl = await DiscordTogether ( \"BOT_TOKEN_HERE\" ) # This creates a bot variable. You can also use the global keyword here instead. Finally, you can use the create_link function @client . command () async def start ( ctx ): link = await client . togetherControl . create_link ( ctx . author . voice . channel . id , 'youtube' ) await ctx . send ( f \"Click the blue link! \\n { link } \" ) Here are some examples to add further clarity: within your bot.py file (using dpy 1.7.2) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from discord.ext import commands from discord_together import DiscordTogether client = commands . Bot ( command_prefix = \"~\" ) @client . event async def on_ready (): print ( f \"Bot logged into { client . user } .\" ) client . togetherControl = await DiscordTogether ( \"BOT_TOKEN_HERE\" ) # This makes a bot variable that can be used anywhere within your bot's code, even within cogs. @client . command () async def start ( ctx ): # Here we consider that the user is already in a VC accessible to the bot. link = await client . togetherControl . create_link ( ctx . author . voice . channel . id , 'youtube' ) await ctx . send ( f \"Click the blue link! \\n { link } \" ) client . run ( \"BOT_TOKEN_HERE\" ) within any cogs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from discord.ext import commands from discord_together import DiscordTogether class YoutubeTogetherCog ( commands . Cog ): def __init__ ( self , client ): self . client = client @commands . Cog . listener () async def on_ready ( self ): self . togetherControl = await DiscordTogether ( \"BOT_TOKEN_HERE\" ) # Remember to only use this if you haven't already made a bot variable for `togetherControl` in your bot.py file. # If you have already declared a bot variable for it, you can use `self.client.togetherControl` to access it's functions @commands . command () async def start ( self , ctx ): # Here we consider that the user is already in a VC accessible to the bot. link = await self . togetherControl . create_link ( ctx . author . voice . channel . id , 'youtube' ) await ctx . send ( f \"Click the blue link! \\n { link } \" ) def setup ( client ): client . add_cog ( YoutubeTogetherCog ( client )) Info If your discord.py fork supports it, you can even use client.http.token instead of inputting your actual token string into the DiscordTogether class constructor. client . togetherControl = await DiscordTogether ( client . http . token ) Voila! An invite into the future of Discord That's an invite created! Before we continue, let's clarify what we just did: DiscordTogether(token) is used to initialize the DiscordTogether instance. This allows the module to authorize the request with your bot's credentials when sent to Discord's API. It does not interfere any of the bot's properties. The package uses a token rather than just a bot variable to allow support for any fork of discord.py create_link() is the only function within this library. It's purpose is to create an invite link into the application that you entered as an argument. Find more insight into using this method here That would conclude the quick setup guide for DiscordTogether. Advisory Note At least one person needs to click on the BLUE LINK, not the 'Play' button, in order to start the activity. Once the activity is started, people can join by clicking 'Play'. Multiple people clicking the blue link at once can cause a \"Activity Ended\" error screen, however it's not a common occurrence.","title":"Setup"},{"location":"setup/#steps-to-setup","text":"Using discord-together is quite simple. First, import the DiscordTogether constructor from discord_together import DiscordTogether Next, create a variable to store the class instance. This variable must be defined in a async function, like on_ready() @client . event async def on_ready (): client . togetherControl = await DiscordTogether ( \"BOT_TOKEN_HERE\" ) # This creates a bot variable. You can also use the global keyword here instead. Finally, you can use the create_link function @client . command () async def start ( ctx ): link = await client . togetherControl . create_link ( ctx . author . voice . channel . id , 'youtube' ) await ctx . send ( f \"Click the blue link! \\n { link } \" ) Here are some examples to add further clarity:","title":"Steps to setup"},{"location":"setup/#within-your-botpy-file-using-dpy-172","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from discord.ext import commands from discord_together import DiscordTogether client = commands . Bot ( command_prefix = \"~\" ) @client . event async def on_ready (): print ( f \"Bot logged into { client . user } .\" ) client . togetherControl = await DiscordTogether ( \"BOT_TOKEN_HERE\" ) # This makes a bot variable that can be used anywhere within your bot's code, even within cogs. @client . command () async def start ( ctx ): # Here we consider that the user is already in a VC accessible to the bot. link = await client . togetherControl . create_link ( ctx . author . voice . channel . id , 'youtube' ) await ctx . send ( f \"Click the blue link! \\n { link } \" ) client . run ( \"BOT_TOKEN_HERE\" )","title":"within your bot.py file (using dpy 1.7.2)"},{"location":"setup/#within-any-cogs","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from discord.ext import commands from discord_together import DiscordTogether class YoutubeTogetherCog ( commands . Cog ): def __init__ ( self , client ): self . client = client @commands . Cog . listener () async def on_ready ( self ): self . togetherControl = await DiscordTogether ( \"BOT_TOKEN_HERE\" ) # Remember to only use this if you haven't already made a bot variable for `togetherControl` in your bot.py file. # If you have already declared a bot variable for it, you can use `self.client.togetherControl` to access it's functions @commands . command () async def start ( self , ctx ): # Here we consider that the user is already in a VC accessible to the bot. link = await self . togetherControl . create_link ( ctx . author . voice . channel . id , 'youtube' ) await ctx . send ( f \"Click the blue link! \\n { link } \" ) def setup ( client ): client . add_cog ( YoutubeTogetherCog ( client )) Info If your discord.py fork supports it, you can even use client.http.token instead of inputting your actual token string into the DiscordTogether class constructor. client . togetherControl = await DiscordTogether ( client . http . token ) Voila! An invite into the future of Discord That's an invite created! Before we continue, let's clarify what we just did: DiscordTogether(token) is used to initialize the DiscordTogether instance. This allows the module to authorize the request with your bot's credentials when sent to Discord's API. It does not interfere any of the bot's properties. The package uses a token rather than just a bot variable to allow support for any fork of discord.py create_link() is the only function within this library. It's purpose is to create an invite link into the application that you entered as an argument. Find more insight into using this method here That would conclude the quick setup guide for DiscordTogether. Advisory Note At least one person needs to click on the BLUE LINK, not the 'Play' button, in order to start the activity. Once the activity is started, people can join by clicking 'Play'. Multiple people clicking the blue link at once can cause a \"Activity Ended\" error screen, however it's not a common occurrence.","title":"within any cogs"},{"location":"changelog/logs/","text":"Logs v1.2.2 - 2021/11/06 Added 2 new activities Awkword (awkword) Checkers in the Park (checkers) v1.2.1 - 2021/10/20 Added SpellCast to default activities Fixed a bug with ConnectionError v1.2.0 - 2021/10/15 Rewrite of entire backend to support any fork of discord.py, now supports any fork Removed ActivityLink class, replaced with string output Optimized error handling by removing redundant custom errors Updated Watch Together's application ID v1.1.2 - 2021/09/25 Added 3 new activities (Credits to @awesomehet2124) Letter Tile (letter-tile) Word Snack (word-snack) Doodle Crew (doodle-crew) Added DiscordTogether.default_choices attribute to list all default application choices as a listGeneral optimizations v1.1.1 - 2021/07/29 Added Python 3.6 and above support! Added docs and discord server badges to README.md Added max_age and max_uses kwargs to create_link() Added InvalidCustomID and RangeExceeded custom errors. Updated the application ID for 'CG 2 Dev' which is now 'Chess in the Park' Created ActivityLink object that is returned after using create_link. Fixed debug mode outputs not appearing for custom ID attempts. Optimized code and fixed redundancies. v1.1.0 - 2021/07/03 Switched to using Semantic Versioning for this package. (Reason for the version jump) Fixed a TypeError caused by inputting options with uppercase letters / strings with spaces in them. Fixed typos within files. Added a Type check for both parameters of create_link() v1.0.8 - 2021/07/02 Pretty big update after taking suggestions and feedback from the package end-users. Switched from a new aiohttp session to using the bot's aiohttp session (Thanks to @Hunter2807) Added support for AutoShardedClient and AutoShardedBot (Thanks @NotFlameDev) Added custom errors to make error handling easier Updated README.md with better advisory notes and documentation Optimized a few parts of the code Added a debug mode kwarg that sends the JSON result attained from the API. This should be used in the case of invalid invite links being sent out. togetherControl = DiscordTogether ( client , debug = True )","title":"Logs"},{"location":"changelog/logs/#logs","text":"","title":"Logs"},{"location":"changelog/logs/#v122-20211106","text":"Added 2 new activities Awkword (awkword) Checkers in the Park (checkers)","title":"v1.2.2 - 2021/11/06"},{"location":"changelog/logs/#v121-20211020","text":"Added SpellCast to default activities Fixed a bug with ConnectionError","title":"v1.2.1 - 2021/10/20"},{"location":"changelog/logs/#v120-20211015","text":"Rewrite of entire backend to support any fork of discord.py, now supports any fork Removed ActivityLink class, replaced with string output Optimized error handling by removing redundant custom errors Updated Watch Together's application ID","title":"v1.2.0 - 2021/10/15"},{"location":"changelog/logs/#v112-20210925","text":"Added 3 new activities (Credits to @awesomehet2124) Letter Tile (letter-tile) Word Snack (word-snack) Doodle Crew (doodle-crew) Added DiscordTogether.default_choices attribute to list all default application choices as a listGeneral optimizations","title":"v1.1.2 - 2021/09/25"},{"location":"changelog/logs/#v111-20210729","text":"Added Python 3.6 and above support! Added docs and discord server badges to README.md Added max_age and max_uses kwargs to create_link() Added InvalidCustomID and RangeExceeded custom errors. Updated the application ID for 'CG 2 Dev' which is now 'Chess in the Park' Created ActivityLink object that is returned after using create_link. Fixed debug mode outputs not appearing for custom ID attempts. Optimized code and fixed redundancies.","title":"v1.1.1 - 2021/07/29"},{"location":"changelog/logs/#v110-20210703","text":"Switched to using Semantic Versioning for this package. (Reason for the version jump) Fixed a TypeError caused by inputting options with uppercase letters / strings with spaces in them. Fixed typos within files. Added a Type check for both parameters of create_link()","title":"v1.1.0 - 2021/07/03"},{"location":"changelog/logs/#v108-20210702","text":"Pretty big update after taking suggestions and feedback from the package end-users. Switched from a new aiohttp session to using the bot's aiohttp session (Thanks to @Hunter2807) Added support for AutoShardedClient and AutoShardedBot (Thanks @NotFlameDev) Added custom errors to make error handling easier Updated README.md with better advisory notes and documentation Optimized a few parts of the code Added a debug mode kwarg that sends the JSON result attained from the API. This should be used in the case of invalid invite links being sent out. togetherControl = DiscordTogether ( client , debug = True )","title":"v1.0.8 - 2021/07/02"},{"location":"changelog/upgrade/","text":"How to upgrade Upgrade to the latest version with: pip install --upgrade discord-together Show the currently installed version with: pip show discord-together Upgrading from 1.1.x to 1.2.x What's new? Rewrite of entire backend to support any fork of discord.py Removed ActivityLink class Optimized error handling Changes to import names The import name for the package was changed due to confusions arising with the capitalizations of the import names: 1.2.x from discord_together import DiscordTogether 1.1.x from discordTogether import DiscordTogether Changes to DiscordTogether class constructor The DiscordTogether constructor now is async, therefore, it would need to be placed in any async function. This is because the package now created it's own aiohttp session that it uses to communicate with Discord API. It is recommended to define this class within the on_ready() function of your bot.py file or in any cog. Due to removing all discord.py dependencies, the package now requires you to input your bot's token into the constructor instead of your client instance. This is so that the API calls that the package makes are authorized under your bot's credentials. The togetherControl class instance is now also stored as a bot variable (aka client.togetherControl ) so that the instance can be used anywhere throughout your bot. 1.2.x client = commands . Bot ( command_prefix = \"~\" ) @client . event async def on_ready (): client . togetherControl = await DiscordTogether ( \"TOKEN_HERE\" ) 1.1.x client = commands . Bot ( command_prefix = \"~\" ) togetherControl = DiscordTogether ( client ) Changes to create_link() function A minor change of using the bot variable instead of just togetherControl . 1.2.x link = await client . togetherControl . create_link ( ctx . author . voice . channel . id , 'youtube' ) 1.1.x link = await togetherControl . create_link ( ctx . author . voice . channel . id , 'youtube' )","title":"How to upgrade"},{"location":"changelog/upgrade/#how-to-upgrade","text":"Upgrade to the latest version with: pip install --upgrade discord-together Show the currently installed version with: pip show discord-together","title":"How to upgrade"},{"location":"changelog/upgrade/#upgrading-from-11x-to-12x","text":"","title":"Upgrading from 1.1.x to 1.2.x"},{"location":"changelog/upgrade/#whats-new","text":"Rewrite of entire backend to support any fork of discord.py Removed ActivityLink class Optimized error handling","title":"What's new?"},{"location":"changelog/upgrade/#changes-to-import-names","text":"The import name for the package was changed due to confusions arising with the capitalizations of the import names: 1.2.x from discord_together import DiscordTogether 1.1.x from discordTogether import DiscordTogether","title":"Changes to import names"},{"location":"changelog/upgrade/#changes-to-discordtogether-class-constructor","text":"The DiscordTogether constructor now is async, therefore, it would need to be placed in any async function. This is because the package now created it's own aiohttp session that it uses to communicate with Discord API. It is recommended to define this class within the on_ready() function of your bot.py file or in any cog. Due to removing all discord.py dependencies, the package now requires you to input your bot's token into the constructor instead of your client instance. This is so that the API calls that the package makes are authorized under your bot's credentials. The togetherControl class instance is now also stored as a bot variable (aka client.togetherControl ) so that the instance can be used anywhere throughout your bot. 1.2.x client = commands . Bot ( command_prefix = \"~\" ) @client . event async def on_ready (): client . togetherControl = await DiscordTogether ( \"TOKEN_HERE\" ) 1.1.x client = commands . Bot ( command_prefix = \"~\" ) togetherControl = DiscordTogether ( client )","title":"Changes to DiscordTogether class constructor"},{"location":"changelog/upgrade/#changes-to-create_link-function","text":"A minor change of using the bot variable instead of just togetherControl . 1.2.x link = await client . togetherControl . create_link ( ctx . author . voice . channel . id , 'youtube' ) 1.1.x link = await togetherControl . create_link ( ctx . author . voice . channel . id , 'youtube' )","title":"Changes to create_link() function"},{"location":"reference/DiscordTogether/","text":"Represents DiscordTogether client instance. Needs to be defined in an async function. Parameters token The bot's token to use for Discord API authorization. Type: str debug \u200c \u200c Debug toggle keyword argument. To be used in case of invalid invites being outputted from DiscordTogether . For more details, check here Type: bool Default: False Methods create_link( VC_ID , APPLICATION , MAX_AGE=0 , MAX_USES=0 ) Communicates with Discord API and returns the invite link for the specific application requested. Refer here for in-dept information. Parameters: - VC_ID The ID of the voice channel that you want to create an invite link to. - APPLICATION The choice of application that you want to create an invite for. - MAX_AGE (kwarg) Optional duration in seconds after which the invite expires. - MAX_USES (kwarg) Optional maximum number of times this invite can be used. Returns: str Attributes default_choices Returns a list of all the default activity choices that the package offers. Type: list","title":"DiscordTogether"},{"location":"reference/DiscordTogether/#parameters","text":"token The bot's token to use for Discord API authorization. Type: str debug \u200c \u200c Debug toggle keyword argument. To be used in case of invalid invites being outputted from DiscordTogether . For more details, check here Type: bool Default: False","title":"Parameters"},{"location":"reference/DiscordTogether/#methods","text":"create_link( VC_ID , APPLICATION , MAX_AGE=0 , MAX_USES=0 ) Communicates with Discord API and returns the invite link for the specific application requested. Refer here for in-dept information. Parameters: - VC_ID The ID of the voice channel that you want to create an invite link to. - APPLICATION The choice of application that you want to create an invite for. - MAX_AGE (kwarg) Optional duration in seconds after which the invite expires. - MAX_USES (kwarg) Optional maximum number of times this invite can be used. Returns: str","title":"Methods"},{"location":"reference/DiscordTogether/#attributes","text":"default_choices Returns a list of all the default activity choices that the package offers. Type: list","title":"Attributes"},{"location":"reference/create-link/","text":"Communicates with Discord API and returns the invite link for the specific application requested. Needs to be in an async function. Parameters voiceChannel_ID ID of the voice channel that the invite link will point at. Type: str or int application The VC activity/application that you want to create an invite for. Type: str (for pre-defined applications) or int (for custom IDs) Pre-defined applications These are the applications/activities that currently come with the discord-together package. These currently include: Watch Together youtube Poker Night poker Chess in the Park chess Betrayal.io betrayal Fishington.io fishing Letter Tile letter-tile Word Snack word-snack Doodle Crew doodle-crew SpellCast spellcast Awkword awkword Checkers in the Park checkers Use the text in the (brackets) as the application parameter Custom application IDs This is a advanced feature brought by the package which allows you to create links for applications that may not be included default. This option requires you to have the ID for the application. For example, YouTube Together uses the ID 880218394199220334 . So, if you do have the ID, you can use this option in the format that will be coming up under Examples. max_age \u200c \u200c Duration in seconds after which the invite expires. Value has to be between 0 (Unlimited) and 604800 (7 days). Type: int Default: 86400 (24 hrs) max_uses \u200c \u200c ID of the voice channel that the invite link will point at. Type: int Default: 0 (unlimited) Returns A str containing the invite link you requested for. ( https://discord.gg/INVITE_CODE_HERE ) Examples Creating a link for pre-defined applications link = await client . togetherControl . create_link ( VC_ID_HERE , 'youtube' ) await channel . send ( link ) Creating a link for custom applications using it's ID link = await client . togetherControl . create_link ( VC_ID_HERE , '000000000000000000' ) await channel . send ( link ) Creating a link with max_age keyword argument (kwarg) link = await client . togetherControl . create_link ( VC_ID_HERE , 'youtube' , max_age = 3600 ) await channel . send ( link ) Creating a link with max_uses keyword argument (kwarg) link = await client . togetherControl . create_link ( VC_ID_HERE , 'youtube' , max_uses = 5 ) await channel . send ( link ) Creating a link with both max_age and max_uses kwargs link = await client . togetherControl . create_link ( VC_ID_HERE , 'youtube' , max_age = 3600 , max_uses = 5 ) await channel . send ( link ) Warning Remember, all of these VC activities are made/authorized by Discord and are currently in BETA. You can expect to see bugs and issues with the games sometimes. If you see a bug with Poker Night or Chess in the Park, you can report it on Discord's official \"Game Lab\" here . If you misspell a pre-defined application name or enter an invalid application ID, don't worry! The package has a built-in exception for such cases. Let's take a look at all the exceptions next.","title":"create_link()"},{"location":"reference/create-link/#parameters","text":"voiceChannel_ID ID of the voice channel that the invite link will point at. Type: str or int application The VC activity/application that you want to create an invite for. Type: str (for pre-defined applications) or int (for custom IDs) Pre-defined applications These are the applications/activities that currently come with the discord-together package. These currently include: Watch Together youtube Poker Night poker Chess in the Park chess Betrayal.io betrayal Fishington.io fishing Letter Tile letter-tile Word Snack word-snack Doodle Crew doodle-crew SpellCast spellcast Awkword awkword Checkers in the Park checkers Use the text in the (brackets) as the application parameter Custom application IDs This is a advanced feature brought by the package which allows you to create links for applications that may not be included default. This option requires you to have the ID for the application. For example, YouTube Together uses the ID 880218394199220334 . So, if you do have the ID, you can use this option in the format that will be coming up under Examples. max_age \u200c \u200c Duration in seconds after which the invite expires. Value has to be between 0 (Unlimited) and 604800 (7 days). Type: int Default: 86400 (24 hrs) max_uses \u200c \u200c ID of the voice channel that the invite link will point at. Type: int Default: 0 (unlimited)","title":"Parameters"},{"location":"reference/create-link/#returns","text":"A str containing the invite link you requested for. ( https://discord.gg/INVITE_CODE_HERE )","title":"Returns"},{"location":"reference/create-link/#examples","text":"Creating a link for pre-defined applications link = await client . togetherControl . create_link ( VC_ID_HERE , 'youtube' ) await channel . send ( link ) Creating a link for custom applications using it's ID link = await client . togetherControl . create_link ( VC_ID_HERE , '000000000000000000' ) await channel . send ( link ) Creating a link with max_age keyword argument (kwarg) link = await client . togetherControl . create_link ( VC_ID_HERE , 'youtube' , max_age = 3600 ) await channel . send ( link ) Creating a link with max_uses keyword argument (kwarg) link = await client . togetherControl . create_link ( VC_ID_HERE , 'youtube' , max_uses = 5 ) await channel . send ( link ) Creating a link with both max_age and max_uses kwargs link = await client . togetherControl . create_link ( VC_ID_HERE , 'youtube' , max_age = 3600 , max_uses = 5 ) await channel . send ( link ) Warning Remember, all of these VC activities are made/authorized by Discord and are currently in BETA. You can expect to see bugs and issues with the games sometimes. If you see a bug with Poker Night or Chess in the Park, you can report it on Discord's official \"Game Lab\" here . If you misspell a pre-defined application name or enter an invalid application ID, don't worry! The package has a built-in exception for such cases. Let's take a look at all the exceptions next.","title":"Examples"},{"location":"reference/debug-mode/","text":"DiscordTogether provides a way for you to assess problems that may arise when creating invite links. Debug mode is best used when the package is returning invalid invite codes without raising any errors. Usage of Debug Mode 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from discord.ext import commands from discord_together import DiscordTogether client = commands . Bot ( command_prefix = \"~\" ) @client . event async def on_ready (): print ( f \"Bot logged into { client . user } .\" ) client . togetherControl = await DiscordTogether ( \"BOT_TOKEN_HERE\" , debug = True ) # Debug kwarg set to True @client . command () async def start ( ctx ): link = await client . togetherControl . create_link ( ctx . author . voice . channel . id , 'youtube' ) await ctx . send ( f \"Click the blue link! \\n { link } \" ) client . run ( \"BOT_TOKEN_HERE\" ) Now, whenever you run the create_link method, the package will print the JSON output that is returned by Discord's API. It will look something like this: a debug output for a successful invite creation a debug output for an unsuccessful invite creation These JSON response outputs may be difficult to read or understand but they provide vital information to help point out the cause of the error. It isn't advisable to keep debug mode set to True during deployment, only use it during development. You may turn it off once you know your problem is solved.","title":"Debug Mode"},{"location":"reference/debug-mode/#usage-of-debug-mode","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from discord.ext import commands from discord_together import DiscordTogether client = commands . Bot ( command_prefix = \"~\" ) @client . event async def on_ready (): print ( f \"Bot logged into { client . user } .\" ) client . togetherControl = await DiscordTogether ( \"BOT_TOKEN_HERE\" , debug = True ) # Debug kwarg set to True @client . command () async def start ( ctx ): link = await client . togetherControl . create_link ( ctx . author . voice . channel . id , 'youtube' ) await ctx . send ( f \"Click the blue link! \\n { link } \" ) client . run ( \"BOT_TOKEN_HERE\" ) Now, whenever you run the create_link method, the package will print the JSON output that is returned by Discord's API. It will look something like this: a debug output for a successful invite creation a debug output for an unsuccessful invite creation These JSON response outputs may be difficult to read or understand but they provide vital information to help point out the cause of the error. It isn't advisable to keep debug mode set to True during deployment, only use it during development. You may turn it off once you know your problem is solved.","title":"Usage of Debug Mode"},{"location":"reference/errors/","text":"All the errors that can be raised when you create a invite link. discordTogether.errors.InvalidArgument Raised when an invalid argument was entered. This error can be raised when: Voice Channel ID is incorrect/invalid Application name entered was not found within the default applications list Custom Application ID was incorrect/invalid discordTogether.errors.RangeExceeded Raised when the allowed ranges for max_age and max_uses parameters were exceeded. discordTogether.errors.BotMissingPerms Raised when your bot does not have CREATE_INSTANT_INVITE permissions for that specific channel. discordTogether.errors.ConnectionError Raised when a general error occured while communicating with Discord API.","title":"Errors"}]}